using System;
using System.Threading;

/*
스레드(Thread)는 프로그램 내에서 실행 흐름의 단위입니다.
하나의 프로세스(실행 중인 프로그램)는 여러 개의 스레드를 가질 수 있으며, 각 스레드는 독립적으로 코드의 일부를 실행할 수 있습니다.

주요 특징
•	병렬 처리
여러 스레드를 사용하면 동시에 여러 작업을 처리할 수 있어, CPU 자원을 효율적으로 활용할 수 있습니다.
•	메모리 공유
같은 프로세스 내의 스레드들은 메모리(변수, 객체 등)를 공유합니다.
이로 인해 데이터 공유가 쉽지만, 동시에 여러 스레드가 같은 데이터에 접근하면 충돌이 발생할 수 있으므로 동기화가 필요합니다.
•	경량 실행 단위
프로세스보다 생성 및 종료가 빠르고, 자원 소모가 적습니다.

사용 예시
•	UI 프로그램에서 사용자 입력을 기다리면서 백그라운드 작업을 처리할 때
•	서버에서 여러 클라이언트의 요청을 동시에 처리할 때
•	대용량 데이터 처리, 파일 다운로드 등 시간이 오래 걸리는 작업을 병렬로 처리할 때

주의할 점
•	동기화 필요
여러 스레드가 동시에 같은 데이터를 수정하면 예기치 않은 결과가 발생할 수 있습니다.
이를 방지하기 위해 lock 같은 동기화 기법을 사용합니다.
•	디버깅 어려움
스레드 간의 실행 순서가 매번 달라질 수 있어, 버그가 발생하면 원인 파악이 어려울 수 있습니다.
*/

public class Program
{
    static void Main(string[] args)
    {
        // PrintNumbers 메서드를 실행할 새 스레드 생성
        Thread thread = new Thread(PrintNumbers);
        thread.Start(); // 새 스레드 시작

        // 메인 스레드에서 0~4까지 출력하며 0.5초씩 대기
        for (int i = 0; i < 5; i++)
        {
            Console.WriteLine($"Main Thread: {i}"); // 메인 스레드의 현재 인덱스 출력
            Thread.Sleep(500); // 500ms(0.5초) 대기
        }

        // 새로 시작한 스레드가 종료될 때까지 메인 스레드가 대기
        thread.Join();
        Console.WriteLine("모든 작업 완료"); // 모든 스레드 작업이 끝났음을 알림
    }

    // 별도의 스레드에서 실행될 메서드
    static void PrintNumbers()
    {
        // 0~4까지 출력하며 0.7초씩 대기
        for (int i = 0; i < 5; i++)
        {
            Console.WriteLine($"Worker Thread: {i}"); // 워커 스레드의 현재 인덱스 출력
            Thread.Sleep(700); // 700ms(0.7초) 대기
        }
    }
}